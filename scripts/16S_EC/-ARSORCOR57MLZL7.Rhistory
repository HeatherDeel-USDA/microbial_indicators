show_engines('decision_tree')
show_engines('rand_forest')
rf_model <- decision_tree() %>%
set_args(mtry = tune(), trees =tune(), min_n = tune(), replace = FALSE) %>%
set_engine("partykit", importance = "permutation") %>%
set_mode("censored regression") %>%
translate()
rf_model <- decision_tree() %>%
set_args(mtry = tune(), trees =tune(), min_n = tune(), replace = FALSE) %>%
set_engine("partykit", importance = "permutation") %>%
set_mode("regression") %>%
translate()
rf_model
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
rf_grid <- expand.grid(mtry = c(611,1223,1834),
trees = c(100,250,500),
min_n = c(3,5,7))
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
rf_model <- decision_tree() %>%
set_args(tree_depth =tune(), min_n = tune(), replace = FALSE) %>%
set_engine("partykit", importance = "permutation") %>%
set_mode("regression") %>%
translate()
rf_model
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# tune the parameters
rf_grid <- expand.grid(mtry = c(611,1223,1834),
trees = c(100,250,500),
min_n = c(3,5,7))
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
rf_grid <- expand.grid(tree_depth = c(1,2,3),
min_n = c(3,5,7))
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune(), replace = FALSE) %>%
set_engine("partykit", importance = "permutation") %>%
set_mode("regression") %>%
translate()
rf_model
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
rf_grid <- expand.grid(mtry = c(611,1223,1834),
trees = c(100,250,500),
min_n = c(3,5,7))
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
?partykit
??partykit
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune(), replace = NA) %>%
set_engine("partykit", importance = "permutation") %>%
set_mode("regression") %>%
translate()
rf_model
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# tune the parameters
rf_grid <- expand.grid(mtry = c(611,1223,1834),
trees = c(100,250,500),
min_n = c(3,5,7))
# extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune(), replace = x) %>%
set_engine("partykit", importance = "permutation") %>%
set_mode("regression") %>%
translate()
rf_model
# set the workflow
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# tune the parameters
rf_grid <- expand.grid(mtry = c(611,1223,1834),
trees = c(100,250,500),
min_n = c(3,5,7))
# extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune(), replace = joke=$) %>%
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune(), replace = 7652) %>%
set_engine("partykit", importance = "permutation") %>%
set_mode("regression") %>%
translate()
rf_model
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune()) %>%
set_engine("partykit", importance = "permutation", replace = FALSE) %>%
set_mode("regression") %>%
translate()
rf_model
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# tune the parameters
rf_grid <- expand.grid(mtry = c(611,1223,1834),
trees = c(100,250,500),
min_n = c(3,5,7))
# extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
arabidopsis_url <- "https://static-content.springer.com/esm/art%3A10.1186%2F1471-2105-5-132/MediaObjects/12859_2004_248_MOESM3_ESM.txt"
arabidopsis <- read.table(arabidopsis_url, header = TRUE,
sep = " ", na.string = "X")
arabidopsis <- subset(arabidopsis, complete.cases(arabidopsis))
arabidopsis <- arabidopsis[, !(names(arabidopsis) %in% c("X0", "loc"))]
my_randomForest <- randomForest(edit ~ ., data = arabidopsis,
importance = TRUE, ntree = 50,
mtry = 3, replace = TRUE)
require("randomForest")
require("party")
my_randomForest <- randomForest(edit ~ ., data = arabidopsis,
importance = TRUE, ntree = 50,
mtry = 3, replace = TRUE)
my_randomForest <- randomForest(as.factor(edit) ~ ., data = arabidopsis,
importance = TRUE, ntree = 50,
mtry = 3, replace = TRUE)
my_randomForest <- randomForest(as.factor(edit) ~ ., data = arabidopsis,
importance = TRUE, ntree = 50,
mtry = 3, replace = FALSE)
my_varimp <- importance(my_randomForest, scale=TRUE)[,3]
my_varimp <- importance(my_randomForest, scale=FALSE)[,3]
my_cforest_control <- cforest_control(teststat = "quad",
testtype = "Univ", mincriterion = 0, ntree = 50, mtry = 3,
replace = TRUE)
my_cforest <- cforest(edit ~ ., data = arabidopsis,
controls = my_cforest_control)
my_cforest <- cforest(as.factor(edit) ~ ., data = arabidopsis,
controls = my_cforest_control)
?cforest
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune()) %>%
set_engine("partykit", importance = "permutation", replace = FALSE) %>%
set_mode("regression") %>%
translate()
rf_model
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune()) %>%
set_engine("partykit", importance = "permutation", replace = TRUE) %>%
set_mode("regression") %>%
translate()
rf_model
rf_model <- rand_forest() %>%
set_args(mtry = 611, min_n = 3, trees = 100) %>%
set_engine("partykit", importance = "permutation", replace = FALSE) %>%
set_mode("regression") %>%
translate()
rf_model
# set the workflow
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
ml_EC_16S <- readRDS("/Users/Heather.Deel/OneDrive - USDA/microbial_indicators/microbial_indicators/microbial_indicators/machine_learning/16S_EC/ml_EC_16S.RDS")
ml_EC_16S_CASH <- ml_EC_16S[,c(2539,2:2445)]
ml_EC_16S_CASH <- ml_EC_16S_CASH %>%
filter(!is.na(Overall))
soil_split <- initial_split(ml_EC_16S_CASH, prop = 4/5)
soil_split
# extract the train and test sets
soil_train <- training(soil_split)
soil_test <- testing(soil_split)
# cross validation
soil_cv <- vfold_cv(soil_train, v = 5, repeats = 10, strata = NULL)
# define a "recipe", i.e., the role of each variable in the model
# predicting CASH rating, and all other variables (ECs) are predictors
soil_recipe <- recipe(Overall ~ ., data = ml_EC_16S_CASH)
soil_recipe
# specify the model
rf_model <- rand_forest() %>%
set_args(mtry = 611, min_n = 3, trees = 100) %>%
set_engine("partykit", importance = "permutation", replace = FALSE) %>%
set_mode("regression") %>%
translate()
rf_model
# set the workflow
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# fit the model
rf_fit <- rf_workflow %>%
last_fit(soil_split)
rf_fit
test_performance <- rf_fit %>% collect_metrics()
test_performance
test_predictions <- rf_fit %>% collect_predictions()
test_predictions
# graph a regression of predicted vs observed SH_rating values
CASH_EC_lm <- lm(Overall ~ .pred, data = test_predictions)
p1 <- ggplot(CASH_EC_lm$model, aes(x = Overall, y = .pred)) +
geom_point() +
stat_smooth(method = "lm", se = TRUE, level = 0.95) +
labs(title = paste("Adj R2 =",signif(summary(CASH_EC_lm)$adj.r.squared, 2),
" P =",signif(summary(CASH_EC_lm)$coef[2,4], 2)),
x = "Observed CASH Rating", y = "Predicted CASH Rating") +
theme_bw()
p1
rf_model <- rand_forest() %>%
set_args(mtry = 611, min_n = 3, trees = 100) %>%
set_engine("partykit", importance = "permutation", replace = TRUE) %>%
set_mode("regression") %>%
translate()
rf_model
# set the workflow
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# fit the model
rf_fit <- rf_workflow %>%
last_fit(soil_split)
rf_fit
test_performance <- rf_fit %>% collect_metrics()
test_performance
# generate predictions from the test set
test_predictions <- rf_fit %>% collect_predictions()
test_predictions
# graph a regression of predicted vs observed SH_rating values
CASH_EC_lm <- lm(Overall ~ .pred, data = test_predictions)
p1 <- ggplot(CASH_EC_lm$model, aes(x = Overall, y = .pred)) +
geom_point() +
stat_smooth(method = "lm", se = TRUE, level = 0.95) +
labs(title = paste("Adj R2 =",signif(summary(CASH_EC_lm)$adj.r.squared, 2),
" P =",signif(summary(CASH_EC_lm)$coef[2,4], 2)),
x = "Observed CASH Rating", y = "Predicted CASH Rating") +
theme_bw()
p1
ml_EC_16S_ACE <- ml_EC_16S[,c(2:2445,2522)]
ml_EC_16S_ACE$ace <- as.numeric(ml_EC_16S_ACE$ace)
ml_EC_16S_ACE <- ml_EC_16S_ACE %>%
filter(!is.na(ace))
soil_split <- initial_split(ml_EC_16S_ACE, prop = 4/5)
soil_split
# extract the train and test sets
soil_train <- training(soil_split)
soil_test <- testing(soil_split)
# cross validation
soil_cv <- vfold_cv(soil_train, v = 5, repeats = 10, strata = NULL)
# define the recipe
soil_recipe <- recipe(ace ~ ., data = ml_EC_16S_ACE)
soil_recipe
# specify the model, tune
rf_model <- rand_forest() %>%
set_args(mtry = 611, min_n = 5, trees = 3) %>%
set_engine("partykit", importance = "permutation", replace = FALSE) %>%
set_mode("regression") %>%
translate()
rf_model
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
soil_split <- initial_split(ml_EC_16S_ACE, prop = 4/5)
soil_split
# extract the train and test sets
soil_train <- training(soil_split)
soil_test <- testing(soil_split)
# cross validation
soil_cv <- vfold_cv(soil_train, v = 5, repeats = 10, strata = NULL)
# define a "recipe", i.e., the role of each variable in the model
# predicting ACE rating, and all other variables (ECs) are predictors
soil_recipe <- recipe(ace.corr ~ ., data = ml_EC_16S_ACE)
soil_split <- initial_split(ml_EC_16S_ACE, prop = 4/5)
soil_split
# extract the train and test sets
soil_train <- training(soil_split)
soil_test <- testing(soil_split)
# cross validation
soil_cv <- vfold_cv(soil_train, v = 5, repeats = 10, strata = NULL)
# define a "recipe", i.e., the role of each variable in the model
# predicting ACE rating, and all other variables (ECs) are predictors
soil_recipe <- recipe(ace ~ ., data = ml_EC_16S_ACE)
soil_recipe
# specify the model
rf_model <- rand_forest() %>%
set_args(mtry = 611, trees = 5, min_n = 3) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("regression")
# set the workflow
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# fit the model
rf_fit <- rf_workflow %>%
last_fit(soil_split)
rf_fit
test_performance <- rf_fit %>% collect_metrics()
test_performance
# generate predictions from the test set
test_predictions <- rf_fit %>% collect_predictions()
test_predictions
soil_split <- initial_split(ml_EC_16S_ACE, prop = 4/5)
soil_split
# extract the train and test sets
soil_train <- training(soil_split)
soil_test <- testing(soil_split)
# cross validation
soil_cv <- vfold_cv(soil_train, v = 5, repeats = 10, strata = NULL)
# define a "recipe", i.e., the role of each variable in the model
# predicting ACE rating, and all other variables (ECs) are predictors
soil_recipe <- recipe(ace ~ ., data = ml_EC_16S_ACE)
soil_recipe
# specify the model
rf_model <- rand_forest() %>%
set_args(mtry = 611, trees = 5, min_n = 3) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("regression")
# set the workflow
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# fit the model
rf_fit <- rf_workflow %>%
last_fit(soil_split)
rf_fit
test_performance <- rf_fit %>% collect_metrics()
test_performance
# generate predictions from the test set
test_predictions <- rf_fit %>% collect_predictions()
test_predictions
set.seed(7)
soil_split <- initial_split(ml_EC_16S_ACE, prop = 4/5)
soil_split
# extract the train and test sets
soil_train <- training(soil_split)
soil_test <- testing(soil_split)
# cross validation
soil_cv <- vfold_cv(soil_train, v = 5, repeats = 10, strata = NULL)
# define a "recipe", i.e., the role of each variable in the model
# predicting ACE rating, and all other variables (ECs) are predictors
soil_recipe <- recipe(ace ~ ., data = ml_EC_16S_ACE)
soil_recipe
# specify the model
rf_model <- rand_forest() %>%
set_args(mtry = 611, trees = 5, min_n = 3) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("regression")
# set the workflow
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# fit the model
rf_fit <- rf_workflow %>%
last_fit(soil_split)
rf_fit
# save the fit
#saveRDS(rf_fit, paste("machine_learning/16S_EC/ACE_model_results/ml_all_EC_fit", i, ".RDS", sep = ""))
# see how well the model performs
test_performance <- rf_fit %>% collect_metrics()
test_performance
# generate predictions from the test set
test_predictions <- rf_fit %>% collect_predictions()
test_predictions
soil_split <- initial_split(ml_EC_16S_ACE, prop = 4/5)
soil_split
# extract the train and test sets
soil_train <- training(soil_split)
soil_test <- testing(soil_split)
# cross validation
soil_cv <- vfold_cv(soil_train, v = 5, repeats = 10, strata = NULL)
# define a "recipe", i.e., the role of each variable in the model
# predicting ACE rating, and all other variables (ECs) are predictors
soil_recipe <- recipe(ace ~ ., data = ml_EC_16S_ACE)
soil_recipe
# specify the model
rf_model <- rand_forest() %>%
set_args(mtry = 611, trees = 5, min_n = 3) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("regression")
# set the workflow
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# fit the model
rf_fit <- rf_workflow %>%
last_fit(soil_split)
rf_fit
# save the fit
#saveRDS(rf_fit, paste("machine_learning/16S_EC/ACE_model_results/ml_all_EC_fit", i, ".RDS", sep = ""))
# see how well the model performs
test_performance <- rf_fit %>% collect_metrics()
test_performance
# generate predictions from the test set
test_predictions <- rf_fit %>% collect_predictions()
test_predictions
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune()) %>%
set_engine("partykit", importance = "permutation", replace = FALSE) %>%
set_mode("regression") %>%
translate()
rf_model
rf_model <- rand_forest() %>%
set_args(mtry = tune(), min_n = tune(), trees = tune()) %>%
set_engine("partykit", importance = c("permutation","impurity"), replace = FALSE) %>%
set_mode("regression") %>%
translate()
rf_model
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# tune the parameters
rf_grid <- expand.grid(mtry = c(613,1226,1839),
trees = c(100,250,500),
min_n = c(3,5,7))
# extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
rf_grid <- expand.grid(mtry = c(613,1226,1839),
trees = c(1,2,5),
min_n = c(3,5,7))
# extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
rf_model <- rand_forest() %>%
set_args(trees = tune()) %>%
set_engine("partykit", importance = c("permutation","impurity"), replace = FALSE) %>%
set_mode("regression") %>%
translate()
rf_model
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
rf_grid <- expand.grid(trees = c(1,2,5))
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
test_performance <- rf_fit %>% collect_metrics()
test_performance
# generate predictions from the test set
test_predictions <- rf_fit %>% collect_predictions()
test_predictions
ACE_EC_lm <- lm(ace ~ .pred, data = test_predictions)
p1 <- ggplot(ACE_EC_lm$model, aes(x = ace, y = .pred)) +
geom_point() +
stat_smooth(method = "lm", se = TRUE, level = 0.95) +
labs(title = paste("Adj R2 =",signif(summary(ACE_EC_lm)$adj.r.squared, 2),
" P =",signif(summary(ACE_EC_lm)$coef[2,4], 2)),
x = "Observed ACE Rating", y = "Predicted ACE Rating") +
theme_bw()
p1
View(test_predictions)
View(test_performance)
rf_grid <- expand.grid(trees = c(1,2,5))
# extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
test_performance <- rf_fit %>% collect_metrics()
test_performance
# generate predictions from the test set
test_predictions <- rf_fit %>% collect_predictions()
test_predictions
rf_model <- rand_forest() %>%
set_args(trees = tune()) %>%
set_engine("partykit", importance = c("permutation","impurity"), replace = TRUE) %>%
set_mode("regression") %>%
translate()
rf_model
# set the workflow
rf_workflow <- workflow() %>%
add_recipe(soil_recipe) %>%
add_model(rf_model)
# tune the parameters
# rf_grid <- expand.grid(mtry = c(613,1226,1839),
#                        trees = c(1,2,5),
#                        min_n = c(3,5,7))
rf_grid <- expand.grid(trees = c(1,2,5))
# extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = soil_cv, grid = rf_grid, metrics = metric_set(mae, rmse))
test_performance <- rf_fit %>% collect_metrics()
test_performance
# generate predictions from the test set
test_predictions <- rf_fit %>% collect_predictions()
test_predictions
final_model <- fit(rf_workflow, ml_EC_16S_ACE)
library(tidymodels)
library(tidyverse)
library(workflows)
library(tune)
library(metagMisc)
library(ranger)
library(randomForest)
final_model <- fit(rf_workflow, ml_EC_16S_ACE)
final_model <- fit(rf_workflow, ml_EC_16S_ACE)
ranger_obj <- pull_workflow_fit(rf_fit)$fit
ranger_obj <- pull_workflow_fit(rf_workflow)$fit
ranger_obj <- pull_workflow_fit(final_model)$fit
final_model <- fit(rf_workflow, ml_EC_16S_ACE)
# libraries
library(dplyr)
library(party)
library(tidyverse)
ml_EC_16S <- readRDS("/project/soil_micro_lab/micro_indicators/machine_learning/16S_EC/ml_EC_16S.RDS")
# libraries
library(dplyr)
library(party)
library(tidyverse)
#ml_EC_16S <- readRDS("/project/soil_micro_lab/micro_indicators/machine_learning/16S_EC/ml_EC_16S.RDS")
ml_EC_16S <- readRDS("../machine_learning/16S_EC/ml_EC_16S.RDS")
getwd()
#ml_EC_16S <- readRDS("/project/soil_micro_lab/micro_indicators/machine_learning/16S_EC/ml_EC_16S.RDS")
ml_EC_16S <- readRDS("../../machine_learning/16S_EC/ml_EC_16S.RDS")
names(ml_EC_16S)
names(ml_EC_16S)[2445:2517]
